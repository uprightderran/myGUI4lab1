Self Statement
I am currently studying at Harbin Institute of Technology and participating in Professor Hongzhi Wang 's research project at the Massive Data Computing Lab. My focus is on learned index for Cloud-Edge-Device Collaborative Database, and I have achieved some certain results. My paper is expected to be submitted for publication in the near future.
Research interests:
My current research interests mainly focus on databases, including communication in distributed databases and design of index structures. I have mainly conducted research on learned indexes, including the current mainstream architecture, algorithms, and main ideas of learned indexes, as well as using learned indexes to optimize traditional index structures, such as LSM-tree. In addition, I have explored the optimization of learned indexes in Cloud-Edge-Device scenarios and gained knowledge of some mainstream index structures such as Xstore and PLIN.
Research experience:
We are currently designing an index and communication structure for Cloud-Edge-Device scenarios, with the main idea of partially caching the cloud index by the edge. The goal of caching is to enable the edge to perform partial queries and reduce the time required to retrieve data from the cloud. To this end, it is necessary to find an index structure that is as persistent as possible, so that the cached parts minimize update frequency and thus reduce network communication overhead.
I have already completed some work in this direction. Firstly, the design of the index structure is based on the PLIN proposed in the VLDB2023 article "PLIN: A Persistent Learned Index for Non Volatile Memory with High Performance and Instant Recovery". Although PLIN is designed based on NVM storage, its idea meets my design requirements. PLIN has designed an RMI+Overflowtree structure based on block size optimization, minimizing access times for NVM blocks during quries; All leaf nodes are connected using pointers. If the internal nodes cannot accommodate the split leaf nodes, orphan nodes are temporarily generated, and the data can be found through pointers; In addition, data that cannot be accommodated within the leaf nodes is inserted into Overflowtree, and Fast&Fair, a B-tree implementation optimized for NVM, is implemented as the structure of Overflowtree.
According to the strategy of PLIN, when the index structure cannot accommodate data, the data will be inserted into the orphan node or overflow tree first, and the upper RMI node remains unchanged. When the orphan node or overflow tree of the model reaches its maximum limit, retraining will occur. The structure meets my requirements for cache persistence.
The specific design of the index structure is as follows: the cloud, edge, and device cooperate with each other, with the end responsible for simple data collection and storage, and uploading to the cloud and edge; The complete learned index PLIN is implemented in the cloud; The edge is responsible for responding to query requests from various ends. It locally caches internal nodes of the PLIN index (excluding leaf nodes and Overflow trees), and computes leaf node numbers to obtain data from the cloud. When the accuracy of the edge cache index is too low, we should consider caching a new index from the cloud.
My current work is as follows:
Based on the learned index structure Xcache proposed in the article "Fast RDMA based Ordered Key Value Store using Remote Learned Cache", redesign the communication structure between the client and server sides, and complete the code implementation.
Based on the learned index structure PLIN proposed in the article "Fast RDMA based Ordered Key Value Store using Remote Learned Cache", design the communication structure between the client and server sides, and complete the code implementation.
At present, there is still a lot of room for optimization in this work, such as designing specific cache update logic, such as being able to learn the current load (fitting model or using historical statistical information), and specifying reasonable model update thresholds; In addition, the structure of PLIN can be optimized by replacing the upper RMI nodes with ALEX structures, which is more suitable for insert-heavy workloads; Additionally, the overflow tree structure can be redesigned, as the current B-tree structure is likely to become the main overhead for cloud queries.
Research plan:
I hope to continue my research in the field of databases. In addition to some studies conducted during my undergraduate studies, I also plan to explore other aspects of AI4DB, including query optimization, parameter tuning, etc; In addition, based on current research on learned index, I hope to apply the idea of learned index to other fields such as the optimization of time series data.
